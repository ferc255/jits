import unittest
import hypothesis.strategies as st
from hypothesis import given, settings
import numpy

import subprocess


# Generate a hypothesis strategy that returns one of:
# 1. Float number
# 2. Expression surrounded by parenthesis
# 3. Sum/mult/subtract/division of expressions
expr = st.deferred(
    lambda: st.one_of(
        st.floats(
            allow_nan=False,
            allow_infinity=False,
            min_value=1,
            max_value=10e9),
        st.tuples(st.just('('), expr, st.just(')')),
        st.tuples(expr, st.sampled_from('+-*/'), expr),
    )
)


def to_str(expr, result):
    """Transform a structure generated by hypothesis into
    string.

    Example: (('(', (2.8, '/', 4), ')'), '+', 1.5) ->
             -> (2.8/4)+1.5
    """
    if isinstance(expr, (float, int)):
        result.append(str(expr))
        return

    if expr[0] == '(':
        result.append(expr[0])
        to_str(expr[1], result)
        result.append(expr[2])
        return

    to_str(expr[0], result)
    result.append(expr[1])
    to_str(expr[2], result)


class ExpressionEvaluationTest(unittest.TestCase):
    """The set of tests that verify a correctness of
    a computation.

    For every parser, it generates expressions using a
    hypothesis library. As a source of truth, python's
    built-in function "eval" is chosen. All the computations
    are performed in long-double format.
    """
    def _gen_test_and_verify(self, expr, parser):
        symbols_array = []
        to_str(expr, symbols_array)
        input_string = ''.join(symbols_array)

        try:
            expected = numpy.longdouble(eval(input_string))
        except:
            return

        process = subprocess.run(
            ['./' + parser, input_string],
            stdout=subprocess.PIPE,
        )
        actual = numpy.longdouble(
            process.stdout.decode('ascii').strip())
        infelicity = abs((expected - actual) / actual) if actual else 0
        self.assertLess(infelicity, 1, (expected, actual))        

    @settings(max_examples=1000)
    @given(expr)
    def test_recalc(self, expr):
        self._gen_test_and_verify(expr, 'recalc')

    @settings(max_examples=1000)
    @given(expr)
    def test_libgccjit(self, expr):
        self._gen_test_and_verify(expr, 'libgccjit')

    @settings(max_examples=1000)
    @given(expr)
    def test_ast(self, expr):
        self._gen_test_and_verify(expr, 'ast')    

    
if __name__ == '__main__':
    unittest.main()
